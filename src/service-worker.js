/* eslint-disable eslint-comments/disable-enable-pair */
/* eslint-disable no-restricted-globals */
/* eslint-disable no-underscore-dangle */

const PREFIX = 'mexc-h5';

/* globals workbox */
workbox.core.setCacheNameDetails({
  prefix: PREFIX,
  suffix: 'v2'
});

workbox.routing.registerRoute(
  // This will return true for navigation requests, causing the route to match.
  ({ event }) => event.request.mode === 'navigate',
  workbox.strategies.networkFirst({
    cacheName: PREFIX + '-document'
  })
);

/**
 * Use precaching list generated by workbox in build process.
 * https://developers.google.com/web/tools/workbox/reference-docs/latest/workbox.precaching
 */
workbox.precaching.precacheAndRoute(self.__precacheManifest || []);

/**
 * Register a navigation route.
 * https://developers.google.com/web/tools/workbox/modules/workbox-routing#how_to_register_a_navigation_route
 */
// workbox.routing.registerNavigationRoute('/index.html');

/**
 * Use runtime cache:
 * https://developers.google.com/web/tools/workbox/reference-docs/latest/workbox.routing#.registerRoute
 *
 * Workbox provides all common caching strategies including CacheFirst, NetworkFirst etc.
 * https://developers.google.com/web/tools/workbox/reference-docs/latest/workbox.strategies
 */

/**
 * Handle API requests
 */
workbox.routing.registerRoute(
  new RegExp('/api/file/banner/'),
  workbox.strategies.networkFirst({
    cacheName: PREFIX + '-api'
  })
);

// workbox.routing.registerRoute(
//   /\/api\/file\/download\//,
//   workbox.strategies.staleWhileRevalidate({
//     cacheName: PREFIX + '-download'
//   })
// );

// workbox.routing.registerRoute(
//   /.*\.(?:png|gif|jpg|jpeg|webp|svg)$/,
//   workbox.strategies.staleWhileRevalidate({
//     cacheName: PREFIX + '-image'
//   })
// );

// workbox.routing.registerRoute(
//   /.*\.(?:ttf|otf|woff|woff2|eot)$/,
//   workbox.strategies.cacheFirst({
//     cacheName: PREFIX + '-font'
//   })
// );

// workbox.routing.registerRoute(
//   /.*\.(?:js|css)$/,
//   workbox.strategies.cacheFirst({
//     cacheName: PREFIX + '-static'
//   })
// );

// Control all opened tabs ASAP
workbox.clientsClaim();

/**
 * Response to client after skipping waiting with MessageChannel
 */
self.addEventListener('message', event => {
  const replyPort = event.ports[0];
  const message = event.data;
  if (replyPort && message && message.type === 'skip-waiting') {
    event.waitUntil(
      self.skipWaiting().then(
        () => replyPort.postMessage({ error: null }),
        error => replyPort.postMessage({ error })
      )
    );
  }
});
